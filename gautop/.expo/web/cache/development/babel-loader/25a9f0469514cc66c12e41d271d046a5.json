{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import * as React from \"react\";\n// import { Text, View } from \"react-native\";\n// import { NavigationContainer } from \"@react-navigation/native\";\n// import { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\n// import * as Notifications from \"expo-notifications\";\n// import { StatusBar } from \"expo-status-bar\";\n// import { SafeAreaProvider } from \"react-native-safe-area-context\";\n// import { ThemeProvider } from \"react-native-elements\";\n// import BearTop from \"./src/BearTop\";\n// import BearBot from \"./src/BearBot\";\n\n// const Tab = createBottomTabNavigator();\n// Notifications.setNotificationHandler({\n//   handleNotification: async () => ({\n//     shouldShowAlert: true,\n//     shouldPlaySound: false,\n//     shouldSetBadge: false,\n//   }),\n// });\n// export default function App() {\n//   return (\n//     <SafeAreaProvider>\n//       <ThemeProvider>\n//         <NavigationContainer>\n//           <StatusBar />\n//           <Tab.Navigator\n//             tabBarOptions={{\n//               activeTintColor: \"tomato\",\n//               activeBackgroundColor: \"#F4F6F7\",\n//               inactiveTintColor: \"gray\",\n//               labelStyle: {\n//                 fontSize: 18,\n//                 fontWeight: \"bold\",\n//                 paddingBottom: 10,\n//               },\n//               style: { backgroundColor: \"##FDFEFE\" },\n//             }}\n//           >\n//             <Tab.Screen name=\"ðŸ‘† Gáº¥u ðŸ‘†\" component={BearTop} />\n//             <Tab.Screen name=\"ðŸ‘‡ Gáº¥u ðŸ‘‡\" component={BearBot} />\n//           </Tab.Navigator>\n//         </NavigationContainer>\n//       </ThemeProvider>\n//     </SafeAreaProvider>\n//   );\n// }\n\n// import Constants from 'expo-constants';\n// import * as Notifications from 'expo-notifications';\n// import React, { useState, useEffect, useRef } from 'react';\n// import { Text, View, Button, Platform } from 'react-native';\n\n// // Notifications.setNotificationHandler({\n// //   handleNotification: async () => ({\n// //     shouldShowAlert: true,\n// //     shouldPlaySound: false,\n// //     shouldSetBadge: false,\n// //   }),\n// // });\n\n// export default function App() {\n//   const [expoPushToken, setExpoPushToken] = useState('ExponentPushToken[HsWRXWGhvRSq6VAwM_RTG0]');\n//   const [notification, setNotification] = useState(false);\n//   const notificationListener = useRef();\n//   const responseListener = useRef();\n\n//   // useEffect(() => {\n//   //   // registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n\n//   //   // This listener is fired whenever a notification is received while the app is foregrounded\n//   //   notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n//   //     setNotification(notification);\n//   //   });\n\n//   //   // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\n//   //   responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n//   //     console.log(response);\n//   //   });\n\n//   //   return () => {\n//   //     Notifications.removeNotificationSubscription(notificationListener.current);\n//   //     Notifications.removeNotificationSubscription(responseListener.current);\n//   //   };\n//   // }, []);\n\n//   return (\n//     <View\n//       style={{\n//         flex: 1,\n//         alignItems: 'center',\n//         justifyContent: 'space-around',\n//       }}>\n//       <Text>Your expo push token: {expoPushToken}</Text>\n//       {/* <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n//         <Text>Title: {notification && notification.request.content.title} </Text>\n//         <Text>Body: {notification && notification.request.content.body}</Text>\n//         <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n//       </View> */}\n//       <Button\n//         title=\"Press to Send Notification\"\n//         onPress={async () => {\n//           await sendPushNotification(expoPushToken);\n//         }}\n//       />\n//     </View>\n//   );\n// }\n\n// // Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/notifications\n// async function sendPushNotification(expoPushToken) {\n//   const message = {\n//     to: expoPushToken,\n//     sound: 'default',\n//     title: 'Original Title',\n//     body: 'And here is the body!',\n//     data: { someData: 'goes here' },\n//   };\n\n//   await fetch('https://exp.host/--/api/v2/push/send', {\n//     method: 'POST',\n//     headers: {\n//       Accept: 'application/json',\n//       'Accept-encoding': 'gzip, deflate',\n//       'Content-Type': 'application/json',\n//     },\n//     mode: \"no-cors\",\n//     body: JSON.stringify(message),\n//   });\n// }\n\n// // async function registerForPushNotificationsAsync() {\n// //   let token;\n// //   if (Constants.isDevice) {\n// //     const { status: existingStatus } = await Notifications.getPermissionsAsync();\n// //     let finalStatus = existingStatus;\n// //     if (existingStatus !== 'granted') {\n// //       const { status } = await Notifications.requestPermissionsAsync();\n// //       finalStatus = status;\n// //     }\n// //     if (finalStatus !== 'granted') {\n// //       alert('Failed to get push token for push notification!');\n// //       return;\n// //     }\n// //     token = (await Notifications.getExpoPushTokenAsync()).data;\n// //     console.log(token);\n// //   } else {\n// //     alert('Must use physical device for Push Notifications');\n// //   }\n\n// //   if (Platform.OS === 'android') {\n// //     Notifications.setNotificationChannelAsync('default', {\n// //       name: 'default',\n// //       importance: Notifications.AndroidImportance.MAX,\n// //       vibrationPattern: [0, 250, 250, 250],\n// //       lightColor: '#FF231F7C',\n// //     });\n// //   }\n\n// //   return token;\n// // }"]},"metadata":{},"sourceType":"script"}