{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\HaToan\\\\Documents\\\\chatappGAU\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport React, { useState, useEffect, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport default function App() {\n  var _useState = useState('ExponentPushToken[HsWRXWGhvRSq6VAwM_RTG0]'),\n      _useState2 = _slicedToArray(_useState, 2),\n      expoPushToken = _useState2[0],\n      setExpoPushToken = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notification = _useState4[0],\n      setNotification = _useState4[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'space-around'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"Your expo push token: \", expoPushToken), React.createElement(Button, {\n    title: \"Press to Send Notification\",\n    onPress: function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(sendPushNotification(expoPushToken));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction sendPushNotification(expoPushToken) {\n  var message;\n  return _regeneratorRuntime.async(function sendPushNotification$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          message = {\n            to: expoPushToken,\n            sound: 'default',\n            title: 'Original Title',\n            body: 'And here is the body!',\n            data: {\n              someData: 'goes here'\n            }\n          };\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Accept-encoding': 'gzip, deflate',\n              'Content-Type': 'application/json'\n            },\n            mode: \"no-cors\",\n            body: JSON.stringify(message)\n          }));\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/HaToan/Documents/chatappGAU/App.js"],"names":["Constants","Notifications","React","useState","useEffect","useRef","App","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","flex","alignItems","justifyContent","sendPushNotification","message","to","sound","title","body","data","someData","fetch","method","headers","Accept","mode","JSON","stringify"],"mappings":";;;AA+CA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;;;;AAWA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAA0CH,QAAQ,CAAC,2CAAD,CAAlD;AAAA;AAAA,MAAOI,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAAwCL,QAAQ,CAAC,KAAD,CAAhD;AAAA;AAAA,MAAOM,YAAP;AAAA,MAAqBC,eAArB;;AACA,MAAMC,oBAAoB,GAAGN,MAAM,EAAnC;AACA,MAAMO,gBAAgB,GAAGP,MAAM,EAA/B;AAqBA,SACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLQ,MAAAA,IAAI,EAAE,CADD;AAELC,MAAAA,UAAU,EAAE,QAFP;AAGLC,MAAAA,cAAc,EAAE;AAHX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA6BR,aAA7B,CANF,EAYE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,4BADR;AAEE,IAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACDS,oBAAoB,CAACT,aAAD,CADnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CADF;AAqBD;;AAGD,SAAeS,oBAAf,CAAoCT,aAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQU,UAAAA,OADR,GACkB;AACdC,YAAAA,EAAE,EAAEX,aADU;AAEdY,YAAAA,KAAK,EAAE,SAFO;AAGdC,YAAAA,KAAK,EAAE,gBAHO;AAIdC,YAAAA,IAAI,EAAE,uBAJQ;AAKdC,YAAAA,IAAI,EAAE;AAAEC,cAAAA,QAAQ,EAAE;AAAZ;AALQ,WADlB;AAAA;AAAA,2CASQC,KAAK,CAAC,sCAAD,EAAyC;AAClDC,YAAAA,MAAM,EAAE,MAD0C;AAElDC,YAAAA,OAAO,EAAE;AACPC,cAAAA,MAAM,EAAE,kBADD;AAEP,iCAAmB,eAFZ;AAGP,8BAAgB;AAHT,aAFyC;AAOlDC,YAAAA,IAAI,EAAE,SAP4C;AAQlDP,YAAAA,IAAI,EAAEQ,IAAI,CAACC,SAAL,CAAeb,OAAf;AAR4C,WAAzC,CATb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// import * as React from \"react\";\n// import { Text, View } from \"react-native\";\n// import { NavigationContainer } from \"@react-navigation/native\";\n// import { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\n// import * as Notifications from \"expo-notifications\";\n// import { StatusBar } from \"expo-status-bar\";\n// import { SafeAreaProvider } from \"react-native-safe-area-context\";\n// import { ThemeProvider } from \"react-native-elements\";\n// import BearTop from \"./src/BearTop\";\n// import BearBot from \"./src/BearBot\";\n\n// const Tab = createBottomTabNavigator();\n// Notifications.setNotificationHandler({\n//   handleNotification: async () => ({\n//     shouldShowAlert: true,\n//     shouldPlaySound: false,\n//     shouldSetBadge: false,\n//   }),\n// });\n// export default function App() {\n//   return (\n//     <SafeAreaProvider>\n//       <ThemeProvider>\n//         <NavigationContainer>\n//           <StatusBar />\n//           <Tab.Navigator\n//             tabBarOptions={{\n//               activeTintColor: \"tomato\",\n//               activeBackgroundColor: \"#F4F6F7\",\n//               inactiveTintColor: \"gray\",\n//               labelStyle: {\n//                 fontSize: 18,\n//                 fontWeight: \"bold\",\n//                 paddingBottom: 10,\n//               },\n//               style: { backgroundColor: \"##FDFEFE\" },\n//             }}\n//           >\n//             <Tab.Screen name=\"ðŸ‘† Gáº¥u ðŸ‘†\" component={BearTop} />\n//             <Tab.Screen name=\"ðŸ‘‡ Gáº¥u ðŸ‘‡\" component={BearBot} />\n//           </Tab.Navigator>\n//         </NavigationContainer>\n//       </ThemeProvider>\n//     </SafeAreaProvider>\n//   );\n// }\n\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Text, View, Button, Platform } from 'react-native';\n\n// Notifications.setNotificationHandler({\n//   handleNotification: async () => ({\n//     shouldShowAlert: true,\n//     shouldPlaySound: false,\n//     shouldSetBadge: false,\n//   }),\n// });\n\nexport default function App() {\n  const [expoPushToken, setExpoPushToken] = useState('ExponentPushToken[HsWRXWGhvRSq6VAwM_RTG0]');\n  const [notification, setNotification] = useState(false);\n  const notificationListener = useRef();\n  const responseListener = useRef();\n\n  // useEffect(() => {\n  //   // registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n\n  //   // This listener is fired whenever a notification is received while the app is foregrounded\n  //   notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n  //     setNotification(notification);\n  //   });\n\n  //   // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\n  //   responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n  //     console.log(response);\n  //   });\n\n  //   return () => {\n  //     Notifications.removeNotificationSubscription(notificationListener.current);\n  //     Notifications.removeNotificationSubscription(responseListener.current);\n  //   };\n  // }, []);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around',\n      }}>\n      <Text>Your expo push token: {expoPushToken}</Text>\n      {/* <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Title: {notification && notification.request.content.title} </Text>\n        <Text>Body: {notification && notification.request.content.body}</Text>\n        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n      </View> */}\n      <Button\n        title=\"Press to Send Notification\"\n        onPress={async () => {\n          await sendPushNotification(expoPushToken);\n        }}\n      />\n    </View>\n  );\n}\n\n// Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/notifications\nasync function sendPushNotification(expoPushToken) {\n  const message = {\n    to: expoPushToken,\n    sound: 'default',\n    title: 'Original Title',\n    body: 'And here is the body!',\n    data: { someData: 'goes here' },\n  };\n\n  await fetch('https://exp.host/--/api/v2/push/send', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Accept-encoding': 'gzip, deflate',\n      'Content-Type': 'application/json',\n    },\n    mode: \"no-cors\",\n    body: JSON.stringify(message),\n  });\n}\n\n// async function registerForPushNotificationsAsync() {\n//   let token;\n//   if (Constants.isDevice) {\n//     const { status: existingStatus } = await Notifications.getPermissionsAsync();\n//     let finalStatus = existingStatus;\n//     if (existingStatus !== 'granted') {\n//       const { status } = await Notifications.requestPermissionsAsync();\n//       finalStatus = status;\n//     }\n//     if (finalStatus !== 'granted') {\n//       alert('Failed to get push token for push notification!');\n//       return;\n//     }\n//     token = (await Notifications.getExpoPushTokenAsync()).data;\n//     console.log(token);\n//   } else {\n//     alert('Must use physical device for Push Notifications');\n//   }\n\n//   if (Platform.OS === 'android') {\n//     Notifications.setNotificationChannelAsync('default', {\n//       name: 'default',\n//       importance: Notifications.AndroidImportance.MAX,\n//       vibrationPattern: [0, 250, 250, 250],\n//       lightColor: '#FF231F7C',\n//     });\n//   }\n\n//   return token;\n// }"]},"metadata":{},"sourceType":"module"}