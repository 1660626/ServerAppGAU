{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HaToan\\\\Documents\\\\chatappGAU\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport * as Notifications from \"expo-notifications\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { ThemeProvider } from \"react-native-elements\";\nimport BearTop from \"./src/BearTop\";\nimport BearBot from \"./src/BearBot\";\nvar Tab = createBottomTabNavigator();\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport default function App() {\n  return React.createElement(SafeAreaProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, React.createElement(ThemeProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, React.createElement(StatusBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }), React.createElement(Tab.Navigator, {\n    tabBarOptions: {\n      activeTintColor: \"tomato\",\n      activeBackgroundColor: \"#F4F6F7\",\n      inactiveTintColor: \"gray\",\n      labelStyle: {\n        fontSize: 18,\n        fontWeight: \"bold\",\n        paddingBottom: 10\n      },\n      style: {\n        backgroundColor: \"##FDFEFE\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, React.createElement(Tab.Screen, {\n    name: \"\\uD83D\\uDC46 G\\u1EA5u \\uD83D\\uDC46\",\n    component: BearTop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["C:/Users/HaToan/Documents/chatappGAU/App.js"],"names":["React","NavigationContainer","createBottomTabNavigator","Notifications","StatusBar","SafeAreaProvider","ThemeProvider","BearTop","BearBot","Tab","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","App","activeTintColor","activeBackgroundColor","inactiveTintColor","labelStyle","fontSize","fontWeight","paddingBottom","style","backgroundColor"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,OAAP;AACA,OAAOC,OAAP;AAEA,IAAMC,GAAG,GAAGP,wBAAwB,EAApC;AACAC,aAAa,CAACO,sBAAd,CAAqC;AACnCC,EAAAA,kBAAkB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAa;AAC/BC,cAAAA,eAAe,EAAE,IADc;AAE/BC,cAAAA,eAAe,EAAE,KAFc;AAG/BC,cAAAA,cAAc,EAAE;AAHe,aAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADe,CAArC;AAOA,eAAe,SAASC,GAAT,GAAe;AAC5B,SACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,GAAD,CAAK,SAAL;AACE,IAAA,aAAa,EAAE;AACbC,MAAAA,eAAe,EAAE,QADJ;AAEbC,MAAAA,qBAAqB,EAAE,SAFV;AAGbC,MAAAA,iBAAiB,EAAE,MAHN;AAIbC,MAAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EAAE,EADA;AAEVC,QAAAA,UAAU,EAAE,MAFF;AAGVC,QAAAA,aAAa,EAAE;AAHL,OAJC;AASbC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAE;AAAnB;AATM,KADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaE,oBAAC,GAAD,CAAK,MAAL;AAAY,IAAA,IAAI,EAAC,oCAAjB;AAA6B,IAAA,SAAS,EAAEjB,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CAFF,CADF,CADF,CADF;AAyBD","sourcesContent":["import * as React from \"react\";\nimport { Text, View } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport * as Notifications from \"expo-notifications\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { ThemeProvider } from \"react-native-elements\";\nimport BearTop from \"./src/BearTop\";\nimport BearBot from \"./src/BearBot\";\n\nconst Tab = createBottomTabNavigator();\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <ThemeProvider>\n        <NavigationContainer>\n          <StatusBar />\n          <Tab.Navigator\n            tabBarOptions={{\n              activeTintColor: \"tomato\",\n              activeBackgroundColor: \"#F4F6F7\",\n              inactiveTintColor: \"gray\",\n              labelStyle: {\n                fontSize: 18,\n                fontWeight: \"bold\",\n                paddingBottom: 10,\n              },\n              style: { backgroundColor: \"##FDFEFE\" },\n            }}\n          >\n            <Tab.Screen name=\"ðŸ‘† Gáº¥u ðŸ‘†\" component={BearTop} />\n            {/* <Tab.Screen name=\"ðŸ‘‡ Gáº¥u ðŸ‘‡\" component={BearBot} /> */}\n          </Tab.Navigator>\n        </NavigationContainer>\n      </ThemeProvider>\n    </SafeAreaProvider>\n  );\n}\n\n\n\n\n// import Constants from 'expo-constants';\n// import * as Notifications from 'expo-notifications';\n// import React, { useState, useEffect, useRef } from 'react';\n// import { Text, View, Button, Platform } from 'react-native';\n\n// // Notifications.setNotificationHandler({\n// //   handleNotification: async () => ({\n// //     shouldShowAlert: true,\n// //     shouldPlaySound: false,\n// //     shouldSetBadge: false,\n// //   }),\n// // });\n\n// export default function App() {\n//   const [expoPushToken, setExpoPushToken] = useState('ExponentPushToken[HsWRXWGhvRSq6VAwM_RTG0]');\n//   const [notification, setNotification] = useState(false);\n//   const notificationListener = useRef();\n//   const responseListener = useRef();\n\n//   // useEffect(() => {\n//   //   // registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\n\n//   //   // This listener is fired whenever a notification is received while the app is foregrounded\n//   //   notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n//   //     setNotification(notification);\n//   //   });\n\n//   //   // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\n//   //   responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n//   //     console.log(response);\n//   //   });\n\n//   //   return () => {\n//   //     Notifications.removeNotificationSubscription(notificationListener.current);\n//   //     Notifications.removeNotificationSubscription(responseListener.current);\n//   //   };\n//   // }, []);\n\n//   return (\n//     <View\n//       style={{\n//         flex: 1,\n//         alignItems: 'center',\n//         justifyContent: 'space-around',\n//       }}>\n//       <Text>Your expo push token: {expoPushToken}</Text>\n//       {/* <View style={{ alignItems: 'center', justifyContent: 'center' }}>\n//         <Text>Title: {notification && notification.request.content.title} </Text>\n//         <Text>Body: {notification && notification.request.content.body}</Text>\n//         <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>\n//       </View> */}\n//       <Button\n//         title=\"Press to Send Notification\"\n//         onPress={async () => {\n//           await sendPushNotification(expoPushToken);\n//         }}\n//       />\n//     </View>\n//   );\n// }\n\n// // Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/notifications\n// async function sendPushNotification(expoPushToken) {\n//   const message = {\n//     to: expoPushToken,\n//     sound: 'default',\n//     title: 'Original Title',\n//     body: 'And here is the body!',\n//     data: { someData: 'goes here' },\n//   };\n\n//   await fetch('https://exp.host/--/api/v2/push/send', {\n//     method: 'POST',\n//     headers: {\n//       Accept: 'application/json',\n//       'Accept-encoding': 'gzip, deflate',\n//       'Content-Type': 'application/json',\n//     },\n//     mode: \"no-cors\",\n//     body: JSON.stringify(message),\n//   });\n// }\n\n// // async function registerForPushNotificationsAsync() {\n// //   let token;\n// //   if (Constants.isDevice) {\n// //     const { status: existingStatus } = await Notifications.getPermissionsAsync();\n// //     let finalStatus = existingStatus;\n// //     if (existingStatus !== 'granted') {\n// //       const { status } = await Notifications.requestPermissionsAsync();\n// //       finalStatus = status;\n// //     }\n// //     if (finalStatus !== 'granted') {\n// //       alert('Failed to get push token for push notification!');\n// //       return;\n// //     }\n// //     token = (await Notifications.getExpoPushTokenAsync()).data;\n// //     console.log(token);\n// //   } else {\n// //     alert('Must use physical device for Push Notifications');\n// //   }\n\n// //   if (Platform.OS === 'android') {\n// //     Notifications.setNotificationChannelAsync('default', {\n// //       name: 'default',\n// //       importance: Notifications.AndroidImportance.MAX,\n// //       vibrationPattern: [0, 250, 250, 250],\n// //       lightColor: '#FF231F7C',\n// //     });\n// //   }\n\n// //   return token;\n// // }"]},"metadata":{},"sourceType":"module"}